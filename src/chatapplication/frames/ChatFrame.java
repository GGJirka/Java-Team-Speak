/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatapplication.frames;

import chatapplication.ChatManager.ChatHandler;
import chatapplication.ChatManager.ChatManager;
import chatapplication.connection.Client;
import chatapplication.connection.UserClient;
import chatapplication.database_connection.DatabaseManager;
import chatapplication.user.User;
import com.mysql.jdbc.PreparedStatement;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JTextArea;

/**
 *
 * @author Adminn
 */
public class ChatFrame extends javax.swing.JInternalFrame {

    private DefaultListModel friends;
    private DatabaseManager database;
    private ChatManager chatManager;
    public Client client;
    private int idClicked = 0;
    private String user;
    private String username;

    /**
     * Creates new form ChatFrame
     */
    public ChatFrame(String username, DatabaseManager database) {
        this.username = username;
        this.database = database;
        initComponents();
        client = new Client(this);
        client.reading();
        try {
            createChatList();
        } catch (SQLException ex) {
            Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*
    * friendListConf() removeAll() - to delete all default elements
    * setModel to Model which we create in makeFriendList() method
     */
    public void friendListConf() throws SQLException {
        friendList.removeAll();
        friendList.setModel(makeFriendList());
    }

    /*
    * makeFriendList() serch in database for all users to 
    * add them into friend list
    * @return DefaultListModel
     */
    public DefaultListModel makeFriendList() throws SQLException {
        friends = new DefaultListModel();
        PreparedStatement db_users = database.Select(new Object[]{"username", "session"}, "users");
        ResultSet db_result = db_users.executeQuery();
        while (db_result.next()) {
            if (db_result.getString("session").equals("0")) {
                friends.addElement(db_result.getString("username") + " offline");
            } else {
                friends.addElement(db_result.getString("username") + " online");
            }
        }
        return friends;
    }

    /*
    * createChatList() create that many elements on how many
    * users are in database
     */
    public void createChatList() throws SQLException {
        chatManager = new ChatManager();
        PreparedStatement db_count = (PreparedStatement) database.connection.prepareStatement("SELECT COUNT(*) FROM users");
        PreparedStatement db_users = database.Select(new Object[]{"username"},"users");
        ResultSet users = db_users.executeQuery();
        ResultSet count = db_count.executeQuery();
        count.next();
        int rows = count.getInt(1);
        for (int i = 0; i < rows; i++) {
            chatManager.addChat(new ChatHandler("",new StringBuilder()));
        }
        for(int i=0;i<rows;i++){
            users.next();
            ChatHandler handler = chatManager.getFriendChatAt(i);
            handler.setUsername(users.getString("username"));
            System.out.println(handler.getUsername());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        message = new javax.swing.JTextField();
        SendButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        chat = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        friendList = new javax.swing.JList<>();

        setClosable(true);
        setTitle("Chat");

        SendButton.setText("Send");
        SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });

        chat.setEditable(false);
        chat.setColumns(20);
        chat.setRows(5);
        jScrollPane2.setViewportView(chat);

        friendList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        friendList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                friendListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(friendList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(SendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(message, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(8, 8, 8)
                .addComponent(SendButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
    * friendListMouseClicked() on friend in friend list clicked
    * create a specific textarea for each two users
     */
    private void friendListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_friendListMouseClicked
        try {
            String friend = friendList.getSelectedValue();
            idClicked = friendList.getSelectedIndex();
            StringBuilder sb = new StringBuilder();
            if (friend != null) {
                for (char c : friend.toCharArray()) {
                    if (c != ' ') {
                        sb.append(c);
                    } else {
                        break;
                    }
                }
            }
            user = sb.toString();
            setTitle("Chat - " + user);

            this.chat.setText("");
            this.chat.append(chatManager.getFriendChatAt(idClicked).getChat().toString());
        } catch (Exception nullpointer) {
        }
    }//GEN-LAST:event_friendListMouseClicked
    
    public void sendMessage(String fromUser, String toUser, String text){
            if(toUser.trim().equalsIgnoreCase(database.user.getUsername().trim())){
                StringBuilder userChat =  chatManager.findChatByUser(fromUser).getChat();
                userChat.append(fromUser+": "+text+"\n");
                System.out.println(user+" "+fromUser);
                if(user.equalsIgnoreCase(fromUser)){
                    chat.setText(userChat.toString());
                }
            }
    }

    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonActionPerformed
        chat.append(database.user.getUsername() + ": " + message.getText() + "\n");
        chatManager.append(idClicked, database.user.getUsername() + ": " + message.getText() + "\n");
        try {
            client.writeMessage(database.user.getUsername(),user, this.message.getText());
        } catch (IOException ex) {
            Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.message.setText("");
    }//GEN-LAST:event_SendButtonActionPerformed
    public Client getClient(){
        return this.client;
    }
    public JTextArea getChat() {
        return chat;
    }
    public ChatManager getChatManager(){
        return chatManager;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SendButton;
    private javax.swing.JTextArea chat;
    private javax.swing.JList<String> friendList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField message;
    // End of variables declaration//GEN-END:variables
}
